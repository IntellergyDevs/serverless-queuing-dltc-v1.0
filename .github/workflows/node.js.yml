name: Python CI/CD

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'infra/**/*'
      - 'flask-demo-app/**/*'
     
  pull_request:
    branches:
      - main
       - 'infra/**/*'
      - 'flask-demo-app/**/*'
      

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask-demo-app/requirements.txt

      - name: Build and test with coverage
        run: |
          python flask-demo-app/test_script.py

  sonarcloud-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || startsWith(github.ref, 'refs/heads/dev/'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./flask-demo-app
          args: >
            -Dsonar.verbose=true
            -X
            -Dsonar.organization=${{ secrets.ORGANIZATION_KEY }}
            -Dsonar.projectKey=${{ secrets.PROJECT_KEY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  terraform:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/main') && contains(github.event.head_commit.message, 'infra')
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: 'your-aws-region' # Ensure this is correctly set to your AWS region
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - name: Checkout Terraform code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -no-color

      # Uncomment the following line if you want to automatically apply the changes
      # - name: Terraform Apply
      #   run: terraform apply -auto-approve

  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - terraform
      - sonarcloud-scan
    steps:
      - name: Manual Approval
        if: github.event_name == 'workflow_run' && github.event.workflow == 'Python CI/CD' && github.event.workflow_run.event == 'workflow_run'
        run: |
          echo "Waiting for manual approval to deploy to staging..."
          # You can customize this step to notify someone for approval
          # or include a manual confirmation process.

      - name: Deploy to Staging
        if: github.event_name == 'workflow_run' && github.event.workflow == 'Python CI/CD' && github.event.workflow_run.event == 'workflow_run'
        run: |
          # Your actual staging deployment commands here
          echo "Deploying to Staging"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Deploy to Production
        run: |
          # Your actual production deployment commands here
          echo "Deploying to Production"
