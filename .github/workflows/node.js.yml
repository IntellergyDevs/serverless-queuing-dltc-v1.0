name: Python CI/CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main
    paths:
      - 'flask-demo-app/**'
      - 'Infra/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask-demo-app/requirements.txt
      - name: Build and test with coverage
        run: |
          python flask-demo-app/test_script.py
  sonarcloud-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: ./flask-demo-app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  terraform:
    runs-on: ubuntu-latest
    needs: sonarcloud-scan
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'infra')) || github.ref == 'refs/heads/dev'
    env:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_ACCESS_KEY }} # Corrected environment variable name
      AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY_ID }} # Corrected environment variable name
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: '1.2'

      - name: Terraform Init
        run: terraform init
        working-directory: ./Infra
        env:
          AWS_DEFAULT_REGION: 'us-east-1' # Optionally, specify default AWS region

      - name: Terraform Format Check
        run: terraform fmt -check
        working-directory: ./Infra

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./Infra

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./Infra

  deploy-staging:
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: Deploy to Staging
        run: echo "Deploying to Staging"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Deploy to Production
        run: echo "Deploying to Production"
