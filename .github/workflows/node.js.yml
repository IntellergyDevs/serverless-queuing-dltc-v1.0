name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - 'flask-demo-app/**/*'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Node.js dependencies
        run: npm install

      - name: Build and test with coverage
        run: npm run build --if-present && npm run test:coverage

  python-test:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r FLASH-DEMO-APP/requirements.txt

      - name: Run Python script and tests
        run: |
          python FLASH-DEMO-APP/app.py
          python FLASH-DEMO-APP/test_script.py

  sonarqube-scan:
    runs-on: ubuntu-latest
    needs: python-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Install SonarScanner
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-11-jre
          sudo wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          sudo unzip sonar-scanner-cli-4.6.2.2472-linux.zip -d /opt
          echo 'export PATH=$PATH:/opt/sonar-scanner-cli-4.6.2.2472-linux/bin' >> $GITHUB_ENV

      - name: Run SonarQube scan
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    steps:
      - name: Deploy to Staging
        run: echo "Deploying to Staging"

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Deploy to Production
        run: echo "Deploying to Production"
