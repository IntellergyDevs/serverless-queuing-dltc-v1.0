name: Python CI/CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
      - 'flask-demo-app/**/*'  # Updated to include pull requests targeting the 'flask-demo-app' folder

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r flask-demo-app/requirements.txt  # Assuming you have requirements.txt inside the flask-demo-app folder
      - name: Build and test with coverage
        run: |
          python flask-demo-app/test_script.py  # Adjust the path accordingly
  sonarqube-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run SonarQube scan
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    steps:
      - name: Deploy to Staging
        run: |
          # Your actual staging deployment commands here
          echo "Deploying to Staging"
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      # Include steps for manual approval if necessary, using environment protection rules
      - name: Deploy to Production
        run: |
          # Your actual production deployment commands here
          echo "Deploying to Production"
