name: Node.js CI/CD

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - dev
    paths:
      - 'frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Use the latest LTS version available (update if needed)

      - name: Install dependencies
        run: |
          cd frontend  # Change to the frontend directory
          npm install

      - name: Build and test with coverage
        run: |
          cd frontend  # Change to the frontend directory
          npm run build --if-present && npm run test:coverage

  sonarqube-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies for SonarQube analysis
        run: |
          cd frontend
          npm install

      - name: Run SonarQube scan
        run: sonar-scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} # Your SonarQube token stored as a secret
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} # Your SonarQube server URL stored as a secret
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Provided by GitHub, no need to create a secret

  deploy-staging:
    runs-on: ubuntu-latest
    needs: sonarqube-scan
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..." # Replace with your actual deploy commands

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Manual Approval
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              context: 'Manual approval for production deployment'
            })

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..." # Replace with your actual deploy commands
